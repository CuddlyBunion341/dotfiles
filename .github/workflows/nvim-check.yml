name: Neovim Checks

on:
  push:
  # push:
  #   branches: [ main ]
    #paths:
    #  - '.config/nvim/**'
  # pull_request:
  #   branches: [ main ]
    # paths:
    #   - '.config/nvim/**'
  # workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      NONINTERACTIVE: "1"
      GIT_TERMINAL_PROMPT: "0"
    steps:
      - uses: actions/checkout@v4

      - name: Restore Homebrew cache
        uses: actions/cache@v4
        with:
          path: |
            /home/linuxbrew/.linuxbrew
            /home/linuxbrew/.cache/Homebrew
          key: linuxbrew-${{ runner.os }}-${{ hashFiles('.tool-versions', '.config/nvim/.tool-versions') }}
          restore-keys: |
            linuxbrew-${{ runner.os }}-

      - name: Install Homebrew
        run: |
          set -euo pipefail

          # Clean up any corrupted homebrew installation
          if [ -d "/home/linuxbrew/.linuxbrew" ] && [ ! -x "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
            echo "Removing corrupted Homebrew installation..."
            sudo rm -rf /home/linuxbrew/.linuxbrew
          fi

          if [ ! -x "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi

          echo "/home/linuxbrew/.linuxbrew/bin" >> "$GITHUB_PATH"
          echo "/home/linuxbrew/.linuxbrew/sbin" >> "$GITHUB_PATH"
          {
            echo "HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew"
            echo "HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar"
            echo "HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew"
          } >> "$GITHUB_ENV"

          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew update --force --quiet
          brew analytics off

      - name: Install mise
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Install mise via Homebrew
          brew install mise

          # Add mise to PATH
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo 'eval "$(mise activate bash)"' >> "$GITHUB_ENV"

      - name: Install language dependencies via mise
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Use mise to install languages based on .tool-versions files
          if [ -f ".tool-versions" ]; then
            mise install
          fi

          if [ -f ".config/nvim/.tool-versions" ]; then
            cd .config/nvim && mise install && cd ../..
          fi

          # Verify installations
          ruby --version || echo "Ruby not installed via mise, will use Homebrew fallback"
          node --version || echo "Node not installed via mise, will use Homebrew fallback"

      - name: Install additional dependencies via Homebrew
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Install core dependencies that Neovim plugins might need
          brew install neovim python@3.12 rust go java lua luarocks ripgrep fd git curl wget

          # Install Ruby and Node if not already available from mise
          if ! command -v ruby &> /dev/null; then
            brew install ruby
          fi

          if ! command -v node &> /dev/null; then
            brew install node
          fi

          # Python packages for Neovim
          python3 -m pip install --user --break-system-packages pynvim debugpy

          # Node packages for Neovim
          npm install --global neovim yarn

          # Ruby gem for Neovim
          gem install --no-document neovim

      - name: Verify installations
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          echo "=== Version Information ==="
          nvim --version
          echo "---"
          python3 --version
          echo "---"
          node --version
          echo "---"
          ruby --version
          echo "---"
          rust --version || echo "Rust not available"
          echo "---"
          go version || echo "Go not available"
          echo "---"
          java -version || echo "Java not available"
          echo "==========================="

      - name: Restore Neovim cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
            ~/.config/nvim/lazy-lock.json
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-

      - name: Copy Neovim configuration
        run: |
          set -euo pipefail

          CONFIG_SRC=""
          if [ -d "./.config/nvim" ]; then
            CONFIG_SRC="./.config/nvim"
          elif [ -d "./neovim" ]; then
            CONFIG_SRC="./neovim"
          elif [ -d "./.config/neovim" ]; then
            CONFIG_SRC="./.config/neovim"
          fi

          if [ -z "$CONFIG_SRC" ]; then
            echo "Unable to locate Neovim configuration in repository" >&2
            exit 1
          fi

          echo "Found Neovim config at: $CONFIG_SRC"

          # Clean and create config directories
          rm -rf ~/.config/neovim ~/.config/nvim
          mkdir -p ~/.config/neovim ~/.config/nvim

          # Copy configuration
          cp -a "$CONFIG_SRC"/. ~/.config/neovim/
          cp -a "$CONFIG_SRC"/. ~/.config/nvim/

          echo "Neovim configuration copied successfully"

      - name: Install Neovim plugins via Lazy
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          echo "Installing Neovim plugins..."

          # Run lazy sync to install all plugins
          nvim --headless -c "lua require('lazy').setup({})" -c "Lazy! sync" -c "qa!" || {
            echo "Plugin installation failed, trying alternative method..."
            nvim --headless -c "if exists(':Lazy') | Lazy! sync | endif" -c "qa!"
          }

          echo "Plugin installation completed"

      - name: Run Neovim healthcheck
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          echo "Running Neovim healthcheck..."

          # Run healthcheck and save to file
          nvim --headless -c "checkhealth" -c "silent w! health_report.txt" -c "qa!" || {
            echo "Healthcheck command failed, but continuing to check output..."
          }

          if [ ! -f health_report.txt ]; then
            echo "Health check did not produce a report" >&2
            exit 1
          fi

          echo "=== Neovim Health Report ==="
          cat health_report.txt
          echo "============================"

          # Check for critical errors (but don't fail on warnings)
          if grep -qiE '(^\\s*[\\-X][[:space:]]*ERROR|CRITICAL ERROR)' health_report.txt; then
            echo "Neovim healthcheck reported critical errors:" >&2
            exit 1
          fi

          echo "Healthcheck completed successfully"

      - name: Upload health report
        if: ${{ always() && !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: nvim-health-report-${{ runner.os }}
          path: health_report.txt

      - name: Save Neovim cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
            ~/.config/nvim/lazy-lock.json
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-