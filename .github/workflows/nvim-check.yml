name: Neovim Checks

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  nvim-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            neovim \
            python3-pip \
            python3-venv \
            nodejs \
            npm \
            ruby \
            git \
            curl \
            wget

      - name: Install Lua formatter
        run: |
          curl -sL https://github.com/JohnnyMorganz/StyLua/releases/latest/download/stylua-linux.zip -o stylua.zip
          unzip stylua.zip
          sudo mv stylua /usr/local/bin/
          rm stylua.zip

      - name: Install Neovim providers
        run: |
          python3 -m pip install --user pynvim
          npm install --global neovim
          gem install --user-install neovim

      - name: Restore Neovim cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
            ~/.config/nvim/lazy-lock.json
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-

      - name: Copy Neovim configuration
        run: |
          mkdir -p ~/.config/nvim
          cp -r .config/nvim/* ~/.config/nvim/

      - name: Install Neovim plugins
        run: |
          nvim --headless -c "if exists(':Lazy') | Lazy! sync | endif" -c "qa"

      - name: Run Lua formatting check
        run: |
          stylua --check .config/nvim/

      - name: Run Neovim healthcheck
        run: |
          nvim --headless -c "checkhealth" -c "silent w! health_report.txt" -c "qa"
          
          if [ ! -f health_report.txt ]; then
            echo "Health check did not produce a report" >&2
            exit 1
          fi

          echo "=== Neovim Health Report ==="
          cat health_report.txt
          echo "============================"

          # Check for errors in health report
          if grep -qiE '(^\s*[\-X][[:space:]]*(ERROR|FAIL)|ERROR:)' health_report.txt; then
            echo "Neovim healthcheck reported errors:" >&2
            cat health_report.txt >&2
            exit 1
          fi

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nvim-health-report
          path: health_report.txt

      - name: Save Neovim cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
            ~/.config/nvim/lazy-lock.json
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-