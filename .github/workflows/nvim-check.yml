name: Neovim Checks

on:
  push:
    branches: [ main, automation-checks ]
    paths:
      - '.config/nvim/**'
      - '.github/workflows/nvim-check.yml'
      - 'Brewfile'
  pull_request:
    branches: [ main ]
    paths:
      - '.config/nvim/**'
      - '.github/workflows/nvim-check.yml'
      - 'Brewfile'
  workflow_dispatch:

jobs:
  neovim-check:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache mise installations
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/mise
            ~/.cache/mise
          key: mise-${{ runner.os }}-${{ hashFiles('**/tool-versions', '.tool-versions', '.config/nvim/.tool-versions') }}
          restore-keys: |
            mise-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          set -euo pipefail

          # Update package lists
          sudo apt-get update

          # Install build essentials and dependencies
          sudo apt-get install -y \
            build-essential \
            curl \
            git \
            unzip \
            gettext \
            cmake \
            ninja-build

      - name: Install Homebrew
        run: |
          set -euo pipefail

          # Install Homebrew
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

          # Add to PATH
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
          echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH

          # Configure environment
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          /home/linuxbrew/.linuxbrew/bin/brew shellenv >> $GITHUB_ENV

      - name: Install core tools via Homebrew
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Install tools from Brewfile
          brew bundle --no-lock --file=Brewfile

          echo "✅ Core tools installed"

      - name: Install mise and setup languages
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Activate mise
          eval "$(mise activate bash)"

          # Install from .tool-versions files if they exist
          if [ -f ".tool-versions" ]; then
            echo "Installing from root .tool-versions"
            mise install
          fi

          if [ -f ".config/nvim/.tool-versions" ]; then
            echo "Installing from .config/nvim/.tool-versions"
            cd .config/nvim
            mise install
            cd ../..
          fi

          # Install common languages for Neovim plugins
          mise install python@3.11 || true
          mise install nodejs@20 || true
          mise install ruby@3.2 || true
          mise install go@latest || true
          mise install rust@latest || true

      - name: Install language packages
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          # Python packages
          if command -v python3 >/dev/null 2>&1; then
            python3 -m pip install --user --upgrade pip
            python3 -m pip install --user pynvim debugpy black isort mypy flake8
            echo "✅ Python packages installed"
          fi

          # Node packages
          if command -v npm >/dev/null 2>&1; then
            npm install -g neovim typescript typescript-language-server
            echo "✅ Node packages installed"
          fi

          # Rust packages
          if command -v cargo >/dev/null 2>&1; then
            cargo install stylua || true
            echo "✅ Rust packages installed"
          fi

      - name: Setup Neovim configuration
        run: |
          set -euo pipefail

          # Copy Neovim config
          mkdir -p ~/.config/nvim
          cp -r .config/nvim/* ~/.config/nvim/

          echo "✅ Neovim configuration copied"

      - name: Cache Neovim plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
          key: nvim-plugins-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json') }}
          restore-keys: |
            nvim-plugins-${{ runner.os }}-

      - name: Install Neovim plugins
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "Installing Neovim plugins..."

          # Test basic Neovim startup first
          echo "Testing Neovim startup..."
          nvim --version
          nvim --headless -c "echo 'Neovim started successfully'" -c "qall"

          # Bootstrap lazy.nvim and install plugins in one step
          echo "Bootstrapping lazy.nvim and installing plugins..."
          nvim --headless -c "lua require('lazy').install({wait=true})" -c "qall" 2>&1 || {
            echo "First attempt failed, trying sync..."
            nvim --headless -c "lua require('lazy').sync({wait=true})" -c "qall" 2>&1 || {
              echo "Plugin installation failed, but continuing..."
            }
          }

          echo "✅ Plugin installation completed"

      - name: Run Neovim health check
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "Running Neovim health check..."

          # Run health check
          nvim --headless -c "checkhealth" -c "write! health-report.txt" -c "qall" || true

          if [ -f health-report.txt ]; then
            echo "=== NEOVIM HEALTH REPORT ==="
            cat health-report.txt
            echo "=========================="

            # Check for critical errors
            if grep -i "ERROR" health-report.txt | grep -v "WARNING" | head -5; then
              echo "⚠️ Found some errors in health check"
            fi
          else
            echo "❌ Health report not generated"
            exit 1
          fi

          echo "✅ Health check completed"

      - name: Show installed versions
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "=== INSTALLED VERSIONS ==="
          echo "Neovim: $(nvim --version | head -1 || echo 'not found')"
          echo "Python: $(python3 --version 2>/dev/null || echo 'not found')"
          echo "Node: $(node --version 2>/dev/null || echo 'not found')"
          echo "Ruby: $(ruby --version 2>/dev/null || echo 'not found')"
          echo "Go: $(go version 2>/dev/null || echo 'not found')"
          echo "Rust: $(rustc --version 2>/dev/null || echo 'not found')"
          echo "========================="

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: neovim-health-report
          path: health-report.txt
          retention-days: 30