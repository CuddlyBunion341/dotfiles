name: Neovim Checks

on:
  push:
  # push:
  #   branches: [ main ]
    #paths:
    #  - '.config/nvim/**'
  # pull_request:
  #   branches: [ main ]
    # paths:
    #   - '.config/nvim/**'
  # workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      NONINTERACTIVE: "1"
      GIT_TERMINAL_PROMPT: "0"
    steps:
      - uses: actions/checkout@v4

      - name: Restore mise cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/mise
            ~/.cache/mise
          key: mise-${{ runner.os }}-${{ hashFiles('.tool-versions', '.config/nvim/.tool-versions', 'Brewfile') }}
          restore-keys: |
            mise-${{ runner.os }}-

      - name: Install Homebrew and core dependencies
        run: |
          set -euo pipefail

          # Install Homebrew
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

          # Setup environment
          echo "/home/linuxbrew/.linuxbrew/bin" >> "$GITHUB_PATH"
          echo "/home/linuxbrew/.linuxbrew/sbin" >> "$GITHUB_PATH"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Install from Brewfile
          brew bundle --file=Brewfile

          echo "‚úÖ Homebrew and core dependencies installed"

      - name: Setup mise and install languages
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          # Install from .tool-versions files
          if [ -f ".tool-versions" ]; then
            echo "üì¶ Installing from root .tool-versions..."
            mise install
          fi

          if [ -f ".config/nvim/.tool-versions" ]; then
            echo "üì¶ Installing from .config/nvim/.tool-versions..."
            cd .config/nvim && mise install && cd ../..
          fi

          # Install additional languages in parallel for common Neovim plugin needs
          echo "üì¶ Installing additional languages..."
          {
            mise install python@latest 2>/dev/null && echo "‚úÖ Python" || echo "‚ö†Ô∏è  Python failed"
          } &
          {
            mise install go@latest 2>/dev/null && echo "‚úÖ Go" || echo "‚ö†Ô∏è  Go failed"
          } &
          {
            mise install rust@latest 2>/dev/null && echo "‚úÖ Rust" || echo "‚ö†Ô∏è  Rust failed"
          } &
          {
            mise install java@latest 2>/dev/null && echo "‚úÖ Java" || echo "‚ö†Ô∏è  Java failed"
          } &

          wait
          echo "‚úÖ Language setup completed"

      - name: Install language-specific packages
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          # Install packages in parallel
          {
            if command -v python3 &> /dev/null; then
              python3 -m pip install --user pynvim debugpy black isort flake8 mypy 2>/dev/null
              echo "‚úÖ Python packages"
            fi
          } &
          {
            if command -v npm &> /dev/null; then
              npm install --global neovim typescript typescript-language-server 2>/dev/null
              echo "‚úÖ Node packages"
            fi
          } &
          {
            if command -v cargo &> /dev/null; then
              cargo install stylua --locked 2>/dev/null && echo "‚úÖ Stylua" || echo "‚ö†Ô∏è  Stylua failed"
            fi
          } &

          wait
          echo "‚úÖ Language packages installed"

      - name: Show versions
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "=== Installed Versions ==="
          echo "Neovim: $(nvim --version | head -1)"
          echo "Mise: $(mise --version)"
          echo "Python: $(python3 --version 2>/dev/null || echo 'not available')"
          echo "Node: $(node --version 2>/dev/null || echo 'not available')"
          echo "Ruby: $(ruby --version 2>/dev/null || echo 'not available')"
          echo "Rust: $(rustc --version 2>/dev/null || echo 'not available')"
          echo "Go: $(go version 2>/dev/null || echo 'not available')"
          echo "=========================="

      - name: Restore Neovim cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-

      - name: Setup Neovim configuration
        run: |
          set -euo pipefail

          # Find and copy Neovim config
          CONFIG_SRC=".config/nvim"
          if [ ! -d "$CONFIG_SRC" ]; then
            echo "‚ùå Neovim config not found at $CONFIG_SRC"
            exit 1
          fi

          echo "üìÅ Copying Neovim config from $CONFIG_SRC"
          rm -rf ~/.config/nvim ~/.config/neovim
          mkdir -p ~/.config/nvim ~/.config/neovim
          cp -a "$CONFIG_SRC"/. ~/.config/nvim/
          cp -a "$CONFIG_SRC"/. ~/.config/neovim/

          echo "‚úÖ Neovim configuration copied"

      - name: Install Neovim plugins
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "üì¶ Installing Neovim plugins..."

          # Use the correct Lazy command syntax
          nvim --headless -c "lua require('lazy').install({wait = true})" -c "qa" || {
            echo "‚ö†Ô∏è  First method failed, trying alternative..."
            nvim --headless +'Lazy! sync' +qa
          }

          echo "‚úÖ Neovim plugins installed"

      - name: Run Neovim healthcheck
        run: |
          set -euo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          eval "$(mise activate bash)"

          echo "üè• Running Neovim healthcheck..."

          # Run healthcheck
          nvim --headless -c "checkhealth" -c "write! health_report.txt" -c "qa" || true

          if [ ! -f health_report.txt ]; then
            echo "‚ùå No health report generated"
            exit 1
          fi

          echo "=== Neovim Health Report ==="
          cat health_report.txt
          echo "============================"

          # Check for critical errors only
          if grep -qiE 'ERROR.*CRITICAL|CRITICAL.*ERROR' health_report.txt; then
            echo "‚ùå Critical errors found in healthcheck"
            exit 1
          fi

          echo "‚úÖ Healthcheck completed"

      - name: Upload health report
        if: ${{ always() && !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: nvim-health-report-${{ runner.os }}
          path: health_report.txt

      - name: Save caches
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.cache/nvim
          key: nvim-cache-${{ runner.os }}-${{ hashFiles('.config/nvim/lazy-lock.json', '.config/nvim/init.lua') }}
          restore-keys: |
            nvim-cache-${{ runner.os }}-